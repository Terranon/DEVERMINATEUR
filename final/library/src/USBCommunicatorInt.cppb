/******************************************************************************\
 * Authors:     Jean-Raphael Matte, Maximilien Bianchi, Thomas Dufour,
 *              William Chartrand
 * Name:        USBCommunicator.cpp
 * Description:	Class that communicates with computer through USB Cable via UART
 * 
 * Version: 2.0
\******************************************************************************/

#include "USBCommunicator.h"

// The instruction
volatile uint8_t usbInstruction;

// The operand
volatile uint8_t usbOperand;

// 1 if there is a new message, 0 if there isn't
volatile uint8_t usbNewMessage;

// Interrupt when the computer sends data
ISR(USART0_RX_vect) {

	// Save the instruction
	::usbInstruction = UDR0;

	// if the instruction starts with F, it is valid
	if ( (::usbInstruction|0x0F) == 0xFF ) {
		
		// Wait for the operand to be sent
		while ( !(UCSR0A & (1 << RXC0)) ) {
		}

		// Save the operand
		::usbOperand = UDR0;

		// Notify
		::usbNewMessage = 1;

	}

}

USBCommunicator::USBCommunicator():
robotName_("GucciBot     "),
teamNumber_("93-97    "),
sectionNumber_('5'),
semester_("18-1"),
robotColor_(BASECOLOR_BLACK),
button_(),
sensors_(),
motors_(),
led_() {

	UBRR0H = 0;
	UBRR0L = 0xCF;

	// Multi-processor Communication Mode
	UCSR0A = 0x00;

	// RX Complete Interrupt Enable, Receiver Enable, Transmitter Enable
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);

	// Asynchronous USART, non Parity, stop bit 1-bit, character size = 8 bits
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);

	::usbInstruction = 0;
	::usbOperand = 0;
	::usbNewMessage = 0;

}

void USBCommunicator::communicate() {

	while(1) {
		checkAndAnswer();
		updateInfo();
	}
	
}

void USBCommunicator::transmit(uint8_t data) {

	// Wait for the buffer to be empty
	while ( !(UCSR0A & (1 << UDRE0)) ) {
	}

	// Put the data into the data buffer register and send
	UDR0 = data;

}

void USBCommunicator::answerWheelL(int8_t operand) {

	// store the sign; 0 if positive, 1 if negative
	uint8_t sign = operand >> 7;

	// absolute value of the speed (in percentage)
	uint8_t absSpeed;
	if (sign == 0) {
		absSpeed = operand;
	} else {
		absSpeed = (~operand)+1;
	}

	// speed sent to the pwm
	uint8_t minPwmSpeed = 60;
	uint8_t pwmSpeed = (( 255 - minPwmSpeed ) * absSpeed / 100) + minPwmSpeed;

	if (sign == 0) {
		motors_.setDirectionLM(Motor::FRWD);
	} else {
		motors_.setDirectionLM(Motor::BACK);
	}
	motors_.setSpeedLM(pwmSpeed);

}

void USBCommunicator::answerWheelR(int8_t operand) {

	// store the sign; 0 if positive, 1 if negative
	uint8_t sign = operand >> 7;

	// absolute value of the speed (in percentage)
	uint8_t absSpeed;
	if (sign == 0) {
		absSpeed = operand;
	} else {
		absSpeed = (~operand)+1;
	}

	// speed sent to the pwm
	uint8_t minPwmSpeed = 60;
	uint8_t pwmSpeed = (( 255 - minPwmSpeed ) * absSpeed / 100) + minPwmSpeed;

	if (sign == 0) {
		motors_.setDirectionRM(Motor::FRWD);
	} else {
		motors_.setDirectionRM(Motor::BACK);
	}
	motors_.setSpeedRM(pwmSpeed);

}

void USBCommunicator::answerLed(uint8_t operand) {

	// update the LED
	switch(operand) {
		case LEDCOLOR_OFF:
			led_.setColor(Led::OFF);
			break;
		case LEDCOLOR_GREEN:
			led_.setColor(Led::GREEN);
			break;
		case LEDCOLOR_RED:
			led_.setColor(Led::RED);
			break;
	}

}

void USBCommunicator::answerInfo() {
	sendName();
	sendTeam();
	sendSection();
	sendSemester();
	sendColor();
}

void USBCommunicator::sendName() {
	transmit(MSG_NAME);
	for(uint8_t i = 0; i < NAMESIZE; i++) {
		transmit(robotName_[i]);
	}
}

void USBCommunicator::sendTeam() {
	transmit(MSG_TEAM);
	for(uint8_t i = 0; i < NUMBERSIZE; i++) {
		transmit(teamNumber_[i]);
	}
}

void USBCommunicator::sendSection() {
	transmit(MSG_SECTION);
	transmit(sectionNumber_);
}

void USBCommunicator::sendSemester() {
	transmit(MSG_SEMESTER);
	for(uint8_t i = 0; i < SEMESTERSIZE; i++) {
		transmit(semester_[i]);
	}
}

void USBCommunicator::sendColor() {
	transmit(MSG_COLOR);
	transmit(robotColor_);
}

void USBCommunicator::sendButton() {
	transmit(MSG_BUTTON);
	if (button_.isPressed()) {
		transmit(BUTTON_PRESSED);
	} else {
		transmit(BUTTON_RELEASED);
	}
}

void USBCommunicator::sendSensorL() {
	transmit(MSG_SENSOR_L);
	transmit(sensors_.getDistanceL());
}

void USBCommunicator::sendSensorR() {
	transmit(MSG_SENSOR_R);
	transmit(sensors_.getDistanceR());
}

void USBCommunicator::updateInfo() {
	sendSensorL();
	sendSensorR();
	sendButton();
}

void USBCommunicator::checkAndAnswer() {
	if (::usbNewMessage == 1) {
		::usbNewMessage = 0;
		uint8_t operand = ::usbOperand;
		switch(::usbInstruction) {
			case MSG_LED:
				answerLed(operand);
				break;
			case MSG_WHEEL_L:
				answerWheelL(operand);
				break;
			case MSG_WHEEL_R:
				answerWheelR(operand);
				break;
			case MSG_INFO:
				answerInfo();
				break;
		}
	}
}