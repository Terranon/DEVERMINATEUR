/******************************************************************************\
 * Author:      William Chartrand
 * Name:        Motor.h
 * Description: This class manages the PWM signals and direction bits sent to
 *              the two motors on the H bridge. The PWM is generated by Timer 0.
 * 
 * Using 
 * JM1D : PORTB5 
 * JM1E : PORTB3
 * JM2D : PORTB6
 * JM2E : PORTB4
 * 
 *      PORTB
 *       1 2   JM1
 * JM2   3 4----E
 *  E----5 6----D
 *  D----7 8
 * 
 * Version: 1.0
\******************************************************************************/

#ifndef MOTOR_H
#define MOTOR_H

#include <avr/io.h>
#include <util/delay.h>

class Motor {
public:
      
	static const uint8_t FRWD = 0;
	static const uint8_t BACK = 1;

	/**
	 * \brief Default Constructor : initialize private attributes of an object 
	 *        from the class Motor by default
	 * \return both Motors going forward with a speed of 0
	 */
	Motor();

	/**
	 * \brief Constuctor with parameters : initialize private attributes of an 
	 *        object from the class Motor by passing a direction, FRWD(forward) 
	 *        or BACK(backward), and a speed (between 0 and 255)
	 * \param direction the direction of the motors, can be Motor::FRWD or 
	 *                  Motor::BACK
	 * \param speed value of the PWM, where 0 is 0%, and 255 is 100%
	 * \return a Motor with the specified directions and a speeds
	 */
	Motor(uint8_t direction, uint8_t speed);
	
	/**
	 * \brief Destructor : destroy an object from the class motor and resets all 
	 *        its private attributes
	 */
	~Motor();

	/**
	 * \brief set the direction or the speed of a motor
	 * \param direction or speed
	 */
	void setSpeed(uint8_t speedLM, uint8_t speedRM);
	
	/**
	 * \brief 
	 * \param
	 * \param
	 */
	void setDirection(uint8_t directionLM, uint8_t directionRM);
	
	/**
	 * \brief set the direction of the left motor
	 * \param direction the direction, can be Motor::FRWD or Motor::BACK
	 */
	void setDirectionLM(uint8_t direction);
	
	/**
	 * \brief set the direction of the right motor
	 * \param direction the direction, can be Motor::FRWD or Motor::BACK
	 */
	void setDirectionRM(uint8_t direction);
	
	/**
	 * \brief set the speed of the left motor
	 * \param speed the speed (0-255)
	 */
	void setSpeedLM(uint8_t speed);
	
	/**
	 * \brief set the speed of the right motor
	 * \param speed the speed (0-255)
	 */
	void setSpeedRM(uint8_t speed);
	
	/**
	 * \brief gives the direction of the left motor
	 * \return the direction of the left motor
	 */
	uint8_t getDirectionLM();
	
	/**
	 * \brief gives the direction of the right motor
	 * \return the direction of the right motor
	 */
	uint8_t getDirectionRM();
	
	/**
	 * \brief gives the speed of the left motor
	 * \return the speed of the left motor
	 */
	uint8_t getSpeedLM();
	
	/**
	 * \brief gives the speed of the right motor
	 * \return the speed of the right motor
	 */
	uint8_t getSpeedRM();

	/**
	 * \brief turn roughly 90 degrees to the left
	 */
	void turnLeft();
	
	/**
	 * \brief turn roughly 90 degrees to the right
	 */
	void turnRight();
	
	/**
	 * \brief set the speed of both motors and their direction to Motor::FRWD
	 * \param speed the speed (0-255)
	 */
	void goFRWD(uint8_t speed);
	
	/**
	 * \brief set the speed of both motors and their direction to Motor::BACK
	 * \param speed the speed (0-255)
	 */
	void goBACK(uint8_t speed);

	/**
	 * \brief stop the motors
	 */
	void stopMotors();
	
private:
	
	/**
	 * \brief update the registers
	 */
	void driveMotors();
	
	// Direction of the left motor
	uint8_t directionLM_;
	
	// Direction of the right motor
	uint8_t directionRM_;
	
	// Speed of the left motor
	uint8_t speedLM_;
	
	// Speed of the right motor
	uint8_t speedRM_;

};

#endif 
